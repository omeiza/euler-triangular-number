/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1, 3
 * 6: 1, 2, 3, 6
 * 10: 1, 2, 5, 10
 * 15: 1, 3, 5, 15
 * 21: 1, 3, 7, 21
 * 28: 1, 2, 4, 7, 14, 28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * Reference: https://projecteuler.net/problem=12
 */

export default function getFirstNthTriangular( limit: number ): number | void {
	const countFactors = ( dividend: number ): number => {
		let count: number = 0;
		const squareRoot: number = Math.floor( Math.sqrt( dividend ) );

		for ( let i = 1; i <= squareRoot; i++ ) {
			if ( dividend % i === 0 ) count = count + 2;
		}

		if ( squareRoot * squareRoot === dividend ) {
			count--;
		}

		return count;
	}

	let n = 1;
	let triangularNumberCount = 0;

	while ( 1 ) {
		triangularNumberCount += n;
		let divisors = countFactors( triangularNumberCount );

		if (divisors > limit ) return triangularNumberCount;
		n++;
	}
}